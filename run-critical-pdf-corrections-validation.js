#!/usr/bin/env node

// run-critical-pdf-corrections-validation.js
// Script para ejecutar la validaci√≥n cr√≠tica de correcciones de PDF

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ SISTEMA DE VALIDACI√ìN CR√çTICA - CORRECCIONES PDF');
console.log('=' .repeat(70));
console.log('');
console.log('PROBLEMA ORIGINAL: "PDF mejor pero sigue apareciendo cortado"');
console.log('');
console.log('CORRECCIONES IMPLEMENTADAS A VALIDAR:');
console.log('‚úÖ 1. Dimensiones A4 corregidas: A4_WIDTH_PX=3507px, A4_HEIGHT_PX=2480px');
console.log('‚úÖ 2. Font-size optimizado: 36px en lugar de 48px');
console.log('‚úÖ 3. M√°rgenes ajustados: 6mm por lado en lugar de 7.5mm');
console.log('‚úÖ 4. Overflow handling mejorado: overflow:visible, white-space:nowrap');
console.log('‚úÖ 5. html2canvas optimizado: onclone function para captura completa');
console.log('');
console.log('OBJETIVO: Confirmar 100% que el problema est√° RESUELTO');
console.log('=' .repeat(70));
console.log('');

// Verificar que Playwright est√° instalado
try {
  execSync('npx playwright --version', { stdio: 'pipe' });
  console.log('‚úÖ Playwright verificado');
} catch (error) {
  console.error('‚ùå Playwright no est√° instalado. Ejecute: npm install playwright');
  process.exit(1);
}

// Verificar archivos de configuraci√≥n
const configFile = path.join(__dirname, 'tests/critical-pdf-corrections.config.js');
const testFile = path.join(__dirname, 'tests/critical-pdf-corrections-validation.spec.js');

if (!fs.existsSync(configFile)) {
  console.error(`‚ùå Archivo de configuraci√≥n no encontrado: ${configFile}`);
  process.exit(1);
}

if (!fs.existsSync(testFile)) {
  console.error(`‚ùå Archivo de test no encontrado: ${testFile}`);
  process.exit(1);
}

console.log('‚úÖ Archivos de test verificados');
console.log('');

// Crear directorio de resultados
const resultsDir = path.join(__dirname, 'test-results');
if (!fs.existsSync(resultsDir)) {
  fs.mkdirSync(resultsDir, { recursive: true });
}

console.log('üé¨ INICIANDO EJECUCI√ìN DE TESTS CR√çTICOS...');
console.log('-'.repeat(50));

try {
  // Ejecutar tests con configuraci√≥n espec√≠fica
  const command = `npx playwright test --config=tests/critical-pdf-corrections.config.js`;
  
  console.log(`üìã Comando: ${command}`);
  console.log('');
  
  // Ejecutar con output en tiempo real
  execSync(command, { 
    stdio: 'inherit',
    cwd: __dirname,
    env: {
      ...process.env,
      CI: 'false', // Desactivar modo CI para m√°s reintentos
      PLAYWRIGHT_HTML_REPORT: './playwright-report/critical-pdf-corrections'
    }
  });
  
  console.log('');
  console.log('üéâ EJECUCI√ìN DE TESTS COMPLETADA');
  
} catch (error) {
  console.log('');
  console.log('‚ö†Ô∏è EJECUCI√ìN COMPLETADA CON ERRORES');
  console.log('üìã C√≥digo de salida:', error.status || 'desconocido');
}

// Mostrar resultados finales
console.log('');
console.log('üìä PROCESANDO RESULTADOS...');

try {
  // Leer reporte final si existe
  const finalReportPath = path.join(__dirname, 'test-results/REPORTE-FINAL-CORRECCIONES-PDF.json');
  
  if (fs.existsSync(finalReportPath)) {
    const finalReport = JSON.parse(fs.readFileSync(finalReportPath, 'utf8'));
    
    console.log('');
    console.log('üìÑ REPORTE FINAL GENERADO:');
    console.log(`üìÅ ${finalReportPath}`);
    console.log('');
    console.log('üéØ ESTADO DE CORRECCIONES:');
    
    Object.entries(finalReport.correcciones_validadas).forEach(([key, data]) => {
      const status = data.validado ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${key}: ${data.descripcion}`);
    });
    
    console.log('');
    console.log('üìä RESUMEN:');
    console.log(`‚Ä¢ Tests ejecutados: ${finalReport.resumen.tests_ejecutados || 'N/A'}`);
    console.log(`‚Ä¢ PDFs generados: ${finalReport.resumen.pdfs_generados_exitosamente || 'N/A'}`);
    console.log(`‚Ä¢ Estado: ${finalReport.resumen.estado_actual || 'N/A'}`);
    
  } else {
    console.log('‚ö†Ô∏è Reporte final no encontrado. Revisando archivos disponibles...');
  }
  
  // Mostrar archivos generados
  console.log('');
  console.log('üìÅ ARCHIVOS DISPONIBLES:');
  
  const directories = [
    'test-results',
    'playwright-report/critical-pdf-corrections'
  ];
  
  directories.forEach(dir => {
    const fullPath = path.join(__dirname, dir);
    if (fs.existsSync(fullPath)) {
      const files = fs.readdirSync(fullPath);
      if (files.length > 0) {
        console.log(`üìÇ ${dir}:`);
        files.forEach(file => {
          console.log(`   ‚Ä¢ ${file}`);
        });
      }
    }
  });
  
} catch (error) {
  console.error('‚ùå Error procesando resultados:', error.message);
}

console.log('');
console.log('üîç ACCESO A REPORTES:');
console.log('‚Ä¢ Reporte HTML: playwright-report/critical-pdf-corrections/index.html');
console.log('‚Ä¢ Reporte JSON: test-results/REPORTE-FINAL-CORRECCIONES-PDF.json');
console.log('‚Ä¢ PDFs generados: test-results/downloads/');
console.log('');

console.log('‚úÖ VALIDACI√ìN CR√çTICA DE CORRECCIONES PDF COMPLETADA');
console.log('=' .repeat(70));