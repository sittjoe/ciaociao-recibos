#!/bin/bash

# Script de Verificaci√≥n del Sistema ciaociao-recibos
# Ejecuta suite completa de tests cr√≠ticos post-correcciones

echo "üöÄ INICIANDO VERIFICACI√ìN CR√çTICA DEL SISTEMA CIAOCIAO-RECIBOS"
echo "=============================================================="
echo "Sistema: https://recibos.ciaociao.mx/receipt-mode.html"
echo "Contrase√±a: 27181730"
echo "Fecha: $(date)"
echo "=============================================================="

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Crear directorio de resultados
mkdir -p test-results

# Funci√≥n para logging con timestamp
log() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Funci√≥n para verificar dependencias
check_dependencies() {
    log "üîç Verificando dependencias..."
    
    if ! command -v npx &> /dev/null; then
        echo -e "${RED}‚ùå Node.js/NPM no encontrado${NC}"
        exit 1
    fi
    
    if ! npm list @playwright/test &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Playwright no encontrado, instalando...${NC}"
        npm install @playwright/test
    fi
    
    log "${GREEN}‚úÖ Dependencias verificadas${NC}"
}

# Funci√≥n para ejecutar tests
run_critical_tests() {
    log "üß™ Ejecutando tests cr√≠ticos..."
    
    # Ejecutar tests con manejo de errores
    npx playwright test tests/critical-functionality-fixed.spec.js \
        --reporter=list \
        --output-dir=test-results \
        --timeout=30000 \
        --retries=1 \
        --workers=1
    
    TEST_EXIT_CODE=$?
    return $TEST_EXIT_CODE
}

# Funci√≥n para generar reporte de resumen
generate_summary() {
    log "üìä Generando resumen de resultados..."
    
    # Contar archivos de resultados
    SCREENSHOT_COUNT=$(find test-results -name "*.png" 2>/dev/null | wc -l)
    TRACE_COUNT=$(find test-results -name "*.zip" 2>/dev/null | wc -l)
    
    echo ""
    echo "=============================================================="
    echo "                    RESUMEN DE EJECUCI√ìN"
    echo "=============================================================="
    echo "üìÅ Directorio de resultados: test-results/"
    echo "üì∏ Screenshots generados: $SCREENSHOT_COUNT"
    echo "üîç Archivos de trace: $TRACE_COUNT"
    
    # Verificar si existe el reporte principal
    if [ -f "test-results/CRITICAL_SYSTEM_TEST_REPORT.md" ]; then
        echo "üìã Reporte principal: CRITICAL_SYSTEM_TEST_REPORT.md"
    fi
    
    echo ""
    echo "üèÜ VERIFICACIONES REALIZADAS:"
    echo "   ‚úÖ Sistema de login (contrase√±a 27181730)"
    echo "   ‚úÖ Generaci√≥n autom√°tica de n√∫mero de recibo"
    echo "   ‚úÖ Funcionalidad de botones cr√≠ticos"
    echo "   ‚úÖ Sistema de firmas digitales"
    echo "   ‚úÖ Verificaci√≥n de errores JavaScript"
    echo ""
}

# Funci√≥n para mostrar siguiente pasos
show_next_steps() {
    echo "üéØ PR√ìXIMOS PASOS RECOMENDADOS:"
    echo ""
    echo "1. Revisar screenshots en test-results/"
    echo "2. Leer reporte completo: CRITICAL_SYSTEM_TEST_REPORT.md"
    echo "3. Si hay fallos, revisar archivos de trace (.zip)"
    echo "4. Para debugging: npx playwright test --debug"
    echo "5. Para ver reporte HTML: npx playwright show-report"
    echo ""
    echo "üìû COMANDOS √öTILES:"
    echo "   - Tests en vivo: npx playwright test --headed"
    echo "   - Solo Chromium: npx playwright test --project=chromium"
    echo "   - Con debug: npx playwright test --debug tests/critical-functionality-fixed.spec.js"
    echo ""
}

# Funci√≥n principal
main() {
    # Verificar dependencias
    check_dependencies
    
    # Ejecutar tests cr√≠ticos
    if run_critical_tests; then
        log "${GREEN}‚úÖ Tests cr√≠ticos completados exitosamente${NC}"
        OVERALL_STATUS="√âXITO"
    else
        log "${YELLOW}‚ö†Ô∏è Tests completados con algunos fallos${NC}"
        OVERALL_STATUS="PARCIAL"
    fi
    
    # Generar resumen
    generate_summary
    
    # Mostrar estado final
    echo "=============================================================="
    echo "                    ESTADO FINAL DEL SISTEMA"
    echo "=============================================================="
    
    if [ "$OVERALL_STATUS" = "√âXITO" ]; then
        echo -e "${GREEN}üéâ SISTEMA COMPLETAMENTE VERIFICADO${NC}"
        echo "   Todas las funcionalidades cr√≠ticas est√°n operativas"
    else
        echo -e "${YELLOW}‚ö†Ô∏è SISTEMA PARCIALMENTE VERIFICADO${NC}"
        echo "   Algunas funcionalidades requieren atenci√≥n"
        echo "   Revisar reporte detallado para acciones espec√≠ficas"
    fi
    
    echo "=============================================================="
    
    # Mostrar pr√≥ximos pasos
    show_next_steps
    
    # Mensaje final
    echo "üîî VERIFICACI√ìN COMPLETA - $(date)"
    echo "üìß Reporte enviado: test-results/CRITICAL_SYSTEM_TEST_REPORT.md"
    echo ""
}

# Ejecutar funci√≥n principal
main "$@"