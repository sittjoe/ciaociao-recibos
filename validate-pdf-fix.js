#!/usr/bin/env node

// validate-pdf-fix.js
// Script para validar que el fix del problema PDF funciona correctamente

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('\nüîç VALIDANDO FIX DEL PROBLEMA PDF');
console.log('================================');
console.log('Ejecutando test r√°pido para confirmar que el problema est√° resuelto\n');

const validationConfig = {
  testFile: './tests/simplified-pdf-diagnosis.spec.js',
  project: 'chromium-pdf-tests',
  timeout: 60000,
  retries: 1
};

console.log('üß™ Configuraci√≥n de validaci√≥n:');
console.log(`- Test: ${validationConfig.testFile}`);
console.log(`- Browser: ${validationConfig.project}`);
console.log(`- Timeout: ${validationConfig.timeout}ms`);
console.log(`- Retries: ${validationConfig.retries}\n`);

try {
  console.log('üöÄ Ejecutando validaci√≥n...\n');
  
  const command = `npx playwright test ${validationConfig.testFile} ` +
    `--project=${validationConfig.project} ` +
    `--timeout=${validationConfig.timeout} ` +
    `--retries=${validationConfig.retries} ` +
    `--reporter=list`;

  const output = execSync(command, { 
    stdio: 'inherit',
    encoding: 'utf8'
  });

  console.log('\n‚úÖ VALIDACI√ìN COMPLETADA');
  
} catch (error) {
  console.log('\n‚ö†Ô∏è  VALIDACI√ìN COMPLETADA CON ERRORES');
  console.log('(Revisar los resultados del test para determinar si el fix funcion√≥)');
}

// Buscar el reporte m√°s reciente
console.log('\nüìä BUSCANDO RESULTADOS...\n');

const findLatestReport = (baseDir) => {
  if (!fs.existsSync(baseDir)) return null;
  
  const sessions = fs.readdirSync(baseDir, { withFileTypes: true })
    .filter(dir => dir.isDirectory() && dir.name.startsWith('PDF-SIMPLE-DIAG-'))
    .map(dir => ({
      name: dir.name,
      path: path.join(baseDir, dir.name),
      timestamp: fs.statSync(path.join(baseDir, dir.name)).birthtime
    }))
    .sort((a, b) => b.timestamp - a.timestamp);

  return sessions.length > 0 ? sessions[0] : null;
};

const latestSession = findLatestReport('./test-results/pdf-diagnosis-simple');

if (latestSession) {
  console.log(`üìÅ Sesi√≥n m√°s reciente: ${latestSession.name}`);
  
  const reportPath = path.join(latestSession.path, 'FINAL-DIAGNOSIS.json');
  const readablePath = path.join(latestSession.path, 'DIAGNOSIS-READABLE.txt');
  
  if (fs.existsSync(reportPath)) {
    try {
      const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
      
      console.log('\nüîç RESULTADO DE LA VALIDACI√ìN:');
      console.log('==============================');
      
      if (report.diagnosis.problemConfirmed === false) {
        console.log('üéâ ¬°PROBLEMA RESUELTO!');
        console.log('‚úÖ Vista previa: FUNCIONA');
        console.log('‚úÖ Generaci√≥n PDF: FUNCIONA');
        console.log('‚úÖ Fix implementado correctamente');
        
      } else if (report.diagnosis.evidence.pdfWorked === true) {
        console.log('üéâ ¬°PROBLEMA RESUELTO!');
        console.log('‚úÖ Vista previa: FUNCIONA');
        console.log('‚úÖ Generaci√≥n PDF: FUNCIONA');
        console.log('‚úÖ Fix validado exitosamente');
        
      } else {
        console.log('‚ùå PROBLEMA A√öN EXISTE');
        console.log(`‚ùå Causa: ${report.diagnosis.rootCause}`);
        console.log('‚ùå El fix necesita revisi√≥n adicional');
        
        if (report.diagnosis.recommendations.length > 0) {
          console.log('\nüí° RECOMENDACIONES ADICIONALES:');
          report.diagnosis.recommendations.forEach((rec, index) => {
            console.log(`   ${index + 1}. ${rec}`);
          });
        }
      }
      
      console.log('\nüìä DETALLES:');
      console.log(`   - Errores de consola: ${report.diagnosis.evidence.consoleErrors}`);
      console.log(`   - jsPDF cargado: ${report.diagnosis.evidence.dependenciesLoaded.jsPDF ? 'S√ç' : 'NO'}`);
      console.log(`   - html2canvas cargado: ${report.diagnosis.evidence.dependenciesLoaded.html2canvas ? 'S√ç' : 'NO'}`);
      
    } catch (parseError) {
      console.log('‚ö†Ô∏è  Error parseando reporte:', parseError.message);
    }
  }
  
  if (fs.existsSync(readablePath)) {
    console.log(`\nüìÑ Reporte completo disponible en:`);
    console.log(`   ${readablePath}`);
  }
  
} else {
  console.log('‚ùå No se encontraron resultados de validaci√≥n');
  console.log('   Aseg√∫rate de que el test se ejecut√≥ correctamente');
}

console.log('\n================================');
console.log('üîç VALIDACI√ìN DEL FIX COMPLETADA');
console.log('================================\n');

// Instrucciones finales
console.log('üìã PR√ìXIMOS PASOS:');
console.log('==================');
console.log('1. Si el problema est√° RESUELTO:');
console.log('   - Documentar la soluci√≥n implementada');
console.log('   - Crear tests de regresi√≥n');
console.log('   - Monitorear en producci√≥n');
console.log('');
console.log('2. Si el problema A√öN EXISTE:');
console.log('   - Revisar las recomendaciones adicionales');
console.log('   - Implementar fixes adicionales');
console.log('   - Ejecutar esta validaci√≥n nuevamente');
console.log('');